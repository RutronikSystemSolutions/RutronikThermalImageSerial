#platform "Gen4-uLCD-35P4CT-CLB"


// Program Skeleton 1.6 generated 15/01/2023 1:02:20 PM

// #MODE RUNFLASH uncomment and set Destination to Flash to run from Flash, refer 4D-AN-00055

#inherit "4DGL_16bitColours.fnc"

#inherit "VisualConst.inc"

var gradientRAM[29+255*2] := [-1,-1,-9999,0,0,255] ;  // uncomment and replace xxx with maximum of all inherent 'media' widgets

#inherit "RutronikThermalImageSerialConst.inc"

// 8x8 font for text or text overlay
#DATA
    byte Aquarius8
    0,    // Type 1, Character Width preceeds each character
    255,    // Num chars
    0,    // Starting Char
    8,    // Font_Width
    8,    // Font_Height

    0x3C, 0x20, 0x20, 0x78, 0x20, 0x60, 0xAC, 0x00, 0x44, 0x48, 0x50, 0x2C,
    0x44, 0x08, 0x1C, 0x00, 0x44, 0x48, 0x50, 0x2C, 0x54, 0x1C, 0x04, 0x00,
    0x64, 0x28, 0x50, 0x2C, 0x54, 0x1C, 0x04, 0x00, 0x00, 0x10, 0x00, 0x7C,
    0x00, 0x10, 0x00, 0x00, 0x3C, 0x42, 0x99, 0xA1, 0xA1, 0x99, 0x42, 0x3C,
    0x00, 0x04, 0x02, 0xFF, 0xFF, 0x02, 0x04, 0x00, 0x00, 0x20, 0x40, 0xFF,
    0xFF, 0x40, 0x20, 0x00, 0x18, 0x3C, 0x5A, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x18, 0x18, 0x18, 0x18, 0x18, 0x5A, 0x3C, 0x18, 0x0F, 0x07, 0x0F, 0x1D,
    0x38, 0x70, 0x20, 0x00, 0x00, 0x04, 0x0E, 0x1C, 0xB8, 0xF0, 0xE0, 0xF0,
    0x00, 0x20, 0x70, 0x38, 0x1D, 0x0F, 0x07, 0x0F, 0xF0, 0xE0, 0xF0, 0xB8,
    0x1C, 0x0E, 0x04, 0x00, 0x00, 0x3C, 0x3C, 0x00, 0x7E, 0xFF, 0xFF, 0xFF,
    0xFC, 0xFC, 0x3C, 0x30, 0x30, 0x30, 0x30, 0x30, 0xFF, 0x3C, 0x3C, 0x3C,
    0x3C, 0x00, 0x00, 0x00, 0x3F, 0x3F, 0x3C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
    0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x00, 0x3C, 0x3C, 0x00,
    0x7E, 0xFF, 0xBD, 0xDB, 0x7E, 0x3C, 0x66, 0x66, 0xE7, 0xC3, 0xC3, 0xC3,
    0x00, 0x38, 0x3C, 0x00, 0x38, 0x78, 0x7C, 0x7F, 0x7C, 0x3E, 0x1B, 0x1E,
    0x1C, 0x18, 0x38, 0x38, 0x00, 0x38, 0x3C, 0x00, 0x39, 0x79, 0xDF, 0xDC,
    0x7C, 0x3F, 0x1F, 0x3B, 0xF3, 0xC3, 0x80, 0x00, 0x18, 0x3C, 0x66, 0x24,
    0xE7, 0xBD, 0x99, 0xDB, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x0F,
    0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0x00, 0x00, 0x00, 0x00,
    0xF0, 0xF0, 0xF0, 0xF0, 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00,
    0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x10, 0x00, 0x28, 0x28, 0x28, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x28, 0x28, 0x7C, 0x28, 0x7C, 0x28, 0x28, 0x00,
    0x10, 0x3C, 0x50, 0x38, 0x14, 0x78, 0x10, 0x00, 0x60, 0x64, 0x08, 0x10,
    0x20, 0x4C, 0x0C, 0x00, 0x20, 0x50, 0x50, 0x20, 0x54, 0x48, 0x34, 0x00,
    0x08, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x20, 0x40, 0x40,
    0x40, 0x20, 0x10, 0x00, 0x10, 0x08, 0x04, 0x04, 0x04, 0x08, 0x10, 0x00,
    0x10, 0x54, 0x38, 0x10, 0x38, 0x54, 0x10, 0x00, 0x00, 0x10, 0x10, 0x7C,
    0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x20, 0x00,
    0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x10, 0x00, 0x00, 0x04, 0x08, 0x10, 0x20, 0x40, 0x00, 0x00,
    0x38, 0x44, 0x4C, 0x54, 0x64, 0x44, 0x38, 0x00, 0x10, 0x30, 0x10, 0x10,
    0x10, 0x10, 0x38, 0x00, 0x38, 0x44, 0x04, 0x18, 0x20, 0x40, 0x7C, 0x00,
    0x7C, 0x04, 0x08, 0x18, 0x04, 0x44, 0x38, 0x00, 0x08, 0x18, 0x28, 0x48,
    0x7C, 0x08, 0x08, 0x00, 0x7C, 0x40, 0x78, 0x04, 0x04, 0x44, 0x38, 0x00,
    0x1C, 0x20, 0x40, 0x78, 0x44, 0x44, 0x38, 0x00, 0x7C, 0x04, 0x08, 0x10,
    0x20, 0x20, 0x20, 0x00, 0x38, 0x44, 0x44, 0x38, 0x44, 0x44, 0x38, 0x00,
    0x38, 0x44, 0x44, 0x3C, 0x04, 0x08, 0x70, 0x00, 0x00, 0x00, 0x10, 0x00,
    0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x10, 0x20, 0x00,
    0x08, 0x10, 0x20, 0x40, 0x20, 0x10, 0x08, 0x00, 0x00, 0x00, 0x7C, 0x00,
    0x7C, 0x00, 0x00, 0x00, 0x20, 0x10, 0x08, 0x04, 0x08, 0x10, 0x20, 0x00,
    0x38, 0x44, 0x08, 0x10, 0x10, 0x00, 0x10, 0x00, 0x38, 0x44, 0x54, 0x5C,
    0x58, 0x40, 0x3C, 0x00, 0x10, 0x28, 0x44, 0x44, 0x7C, 0x44, 0x44, 0x00,
    0x78, 0x44, 0x44, 0x78, 0x44, 0x44, 0x78, 0x00, 0x38, 0x44, 0x40, 0x40,
    0x40, 0x44, 0x38, 0x00, 0x78, 0x44, 0x44, 0x44, 0x44, 0x44, 0x78, 0x00,
    0x7C, 0x40, 0x40, 0x78, 0x40, 0x40, 0x7C, 0x00, 0x7C, 0x40, 0x40, 0x78,
    0x40, 0x40, 0x40, 0x00, 0x3C, 0x40, 0x40, 0x40, 0x4C, 0x44, 0x3C, 0x00,
    0x44, 0x44, 0x44, 0x7C, 0x44, 0x44, 0x44, 0x00, 0x38, 0x10, 0x10, 0x10,
    0x10, 0x10, 0x38, 0x00, 0x04, 0x04, 0x04, 0x04, 0x04, 0x44, 0x38, 0x00,
    0x44, 0x48, 0x50, 0x60, 0x50, 0x48, 0x44, 0x00, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x7C, 0x00, 0x44, 0x6C, 0x54, 0x54, 0x44, 0x44, 0x44, 0x00,
    0x44, 0x44, 0x64, 0x54, 0x4C, 0x44, 0x44, 0x00, 0x38, 0x44, 0x44, 0x44,
    0x44, 0x44, 0x38, 0x00, 0x78, 0x44, 0x44, 0x78, 0x40, 0x40, 0x40, 0x00,
    0x38, 0x44, 0x44, 0x44, 0x54, 0x48, 0x34, 0x00, 0x78, 0x44, 0x44, 0x78,
    0x50, 0x48, 0x44, 0x00, 0x38, 0x44, 0x40, 0x38, 0x04, 0x44, 0x38, 0x00,
    0x7C, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x44, 0x44, 0x44, 0x44,
    0x44, 0x44, 0x38, 0x00, 0x44, 0x44, 0x44, 0x44, 0x44, 0x28, 0x10, 0x00,
    0x44, 0x44, 0x44, 0x54, 0x54, 0x6C, 0x44, 0x00, 0x44, 0x44, 0x28, 0x10,
    0x28, 0x44, 0x44, 0x00, 0x44, 0x44, 0x28, 0x10, 0x10, 0x10, 0x10, 0x00,
    0x7C, 0x04, 0x08, 0x10, 0x20, 0x40, 0x7C, 0x00, 0x7C, 0x60, 0x60, 0x60,
    0x60, 0x60, 0x7C, 0x00, 0x00, 0x40, 0x20, 0x10, 0x08, 0x04, 0x00, 0x00,
    0x7C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x7C, 0x00, 0x00, 0x00, 0x10, 0x28,
    0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x00,
    0x20, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x4C,
    0x44, 0x4C, 0x34, 0x00, 0x40, 0x40, 0x58, 0x64, 0x44, 0x64, 0x58, 0x00,
    0x00, 0x00, 0x1C, 0x20, 0x20, 0x20, 0x1C, 0x00, 0x04, 0x04, 0x34, 0x4C,
    0x44, 0x4C, 0x34, 0x00, 0x00, 0x00, 0x38, 0x44, 0x7C, 0x40, 0x38, 0x00,
    0x08, 0x10, 0x10, 0x38, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x34, 0x4C,
    0x44, 0x3C, 0x04, 0x38, 0x40, 0x40, 0x78, 0x44, 0x44, 0x44, 0x44, 0x00,
    0x10, 0x00, 0x30, 0x10, 0x10, 0x10, 0x38, 0x00, 0x08, 0x00, 0x08, 0x08,
    0x08, 0x08, 0x08, 0x30, 0x40, 0x40, 0x48, 0x50, 0x70, 0x48, 0x44, 0x00,
    0x30, 0x10, 0x10, 0x10, 0x10, 0x10, 0x38, 0x00, 0x00, 0x00, 0x6C, 0x52,
    0x52, 0x52, 0x52, 0x00, 0x00, 0x00, 0x78, 0x44, 0x44, 0x44, 0x44, 0x00,
    0x00, 0x00, 0x38, 0x44, 0x44, 0x44, 0x38, 0x00, 0x00, 0x00, 0x58, 0x64,
    0x44, 0x64, 0x58, 0x40, 0x00, 0x00, 0x34, 0x4C, 0x44, 0x4C, 0x34, 0x06,
    0x00, 0x00, 0x58, 0x60, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, 0x3C, 0x40,
    0x38, 0x04, 0x78, 0x00, 0x10, 0x10, 0x7C, 0x10, 0x10, 0x10, 0x10, 0x00,
    0x00, 0x00, 0x44, 0x44, 0x44, 0x44, 0x3C, 0x00, 0x00, 0x00, 0x44, 0x44,
    0x28, 0x28, 0x10, 0x00, 0x00, 0x00, 0x52, 0x52, 0x52, 0x52, 0x2C, 0x00,
    0x00, 0x00, 0x44, 0x28, 0x10, 0x28, 0x44, 0x00, 0x00, 0x00, 0x24, 0x24,
    0x24, 0x3C, 0x04, 0x38, 0x00, 0x00, 0x7C, 0x08, 0x10, 0x20, 0x7C, 0x00,
    0x0C, 0x10, 0x10, 0x20, 0x10, 0x10, 0x0C, 0x00, 0x10, 0x10, 0x10, 0x00,
    0x10, 0x10, 0x10, 0x00, 0x60, 0x10, 0x10, 0x08, 0x10, 0x10, 0x60, 0x00,
    0x00, 0x00, 0x04, 0x38, 0x40, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x1C, 0x3C, 0x00,
    0x1C, 0x1E, 0x3E, 0xFE, 0x3E, 0x7C, 0xD8, 0x78, 0x38, 0x18, 0x1C, 0x1C,
    0x00, 0x00, 0x00, 0x00, 0xAA, 0x55, 0xAA, 0x55, 0xA0, 0x50, 0xA0, 0x50,
    0xA0, 0x50, 0xA0, 0x50, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
    0x00, 0x18, 0x3C, 0x7E, 0x7E, 0x3C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x18, 0x18, 0x3C, 0x7E, 0xFF, 0xDB, 0x18, 0x3C, 0x3C, 0x18, 0xDB, 0xFF,
    0x7E, 0x3C, 0x18, 0x18, 0x00, 0x1C, 0x3C, 0x00, 0x9C, 0x9E, 0xFB, 0x3B,
    0x3E, 0xFC, 0xF8, 0xDC, 0xCF, 0xC3, 0x01, 0x00, 0xC0, 0xF0, 0xFC, 0xFF,
    0xFF, 0xFC, 0xF0, 0xC0, 0x18, 0x18, 0x3C, 0x3C, 0x7E, 0x7E, 0xFF, 0xFF,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFE, 0xFE, 0xFE, 0xFE,
    0xFE, 0xFE, 0xFE, 0xFE, 0x3C, 0x52, 0x3C, 0x80, 0xBC, 0xFF, 0x3D, 0x3D,
    0x3C, 0x4A, 0x3C, 0x01, 0x3D, 0xFF, 0xBC, 0xBC, 0xAA, 0x55, 0xAA, 0x55,
    0x00, 0x00, 0x00, 0x00, 0x0A, 0x05, 0x0A, 0x05, 0x0A, 0x05, 0x0A, 0x05,
    0x3C, 0x7E, 0xFF, 0xFF, 0xFF, 0xFF, 0x7E, 0x3C, 0xC0, 0xC0, 0xC0, 0xC0,
    0xC0, 0xC0, 0xC0, 0xC0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0,
    0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0x30, 0x38, 0x9C, 0xFF,
    0xFF, 0x9C, 0x38, 0x30, 0x0C, 0x1C, 0x39, 0xFF, 0xFF, 0x39, 0x1C, 0x0C,
    0x00, 0x66, 0x7E, 0x42, 0xC3, 0xFF, 0x18, 0x00, 0x00, 0x18, 0xFF, 0xC3,
    0x42, 0x7E, 0x66, 0x00, 0x03, 0x0F, 0x3F, 0xFF, 0xFF, 0x3F, 0x0F, 0x03,
    0xFF, 0xFF, 0x7E, 0x7E, 0x3C, 0x3C, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xF0, 0xF0, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xF0, 0x00, 0x00, 0x00,
    0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0xF0,
    0xF0, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xF0, 0xF0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0xF0, 0xF0, 0xF0, 0x0F,
    0x0F, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00,
    0xFF, 0xFF, 0xFF, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
    0xFF, 0x00, 0x00, 0x00, 0xF0, 0xF0, 0xF0, 0xFF, 0xFF, 0x00, 0x00, 0x00,
    0x0F, 0x0F, 0x0F, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xF0, 0xF0,
    0xF0, 0xF0, 0xF0, 0x00, 0x00, 0xF0, 0xF0, 0xF0, 0x0F, 0x0F, 0x0F, 0x00,
    0x00, 0xF0, 0xF0, 0xF0, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xF0, 0xF0, 0xF0,
    0x00, 0x00, 0x00, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
    0xF0, 0xF0, 0xF0, 0xF0, 0x0F, 0x0F, 0x0F, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
    0xFF, 0xFF, 0xFF, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0x00, 0x00, 0x00, 0x0F,
    0x0F, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0x0F, 0x0F, 0xF0, 0xF0, 0xF0,
    0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0xF0, 0xF0, 0xF0, 0xFF, 0xFF, 0xFF, 0x0F,
    0x0F, 0xF0, 0xF0, 0xF0, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xF0, 0xF0, 0xF0,
    0xF0, 0xF0, 0xF0, 0xFF, 0xFF, 0xF0, 0xF0, 0xF0, 0x0F, 0x0F, 0x0F, 0xFF,
    0xFF, 0xF0, 0xF0, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xF0, 0xF0,
    0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F, 0xFF, 0x80, 0xC0, 0xE0, 0xF0,
    0xF8, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0x7E, 0x3C, 0x00, 0x00, 0x00, 0x00,
    0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0x00, 0x00, 0x3C, 0x3C,
    0x3C, 0x3C, 0x00, 0x00, 0x18, 0x3C, 0x7E, 0xFF, 0xFF, 0x7E, 0x3C, 0x18,
    0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x07, 0x03,
    0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0xFF, 0xFF, 0x18, 0x18, 0x18,
    0x00, 0x00, 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF0, 0x01, 0x02, 0x04, 0x08,
    0x10, 0x20, 0x40, 0x80, 0x03, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x03,
    0x18, 0x18, 0x18, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x1F,
    0x1F, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0xF8, 0xF8, 0x18, 0x18, 0x18,
    0x18, 0x18, 0x18, 0x1F, 0x1F, 0x00, 0x00, 0x00, 0x09, 0x20, 0x04, 0x80,
    0x11, 0x40, 0x08, 0x02, 0x52, 0x44, 0x2D, 0xC4, 0x11, 0xB4, 0x23, 0x4A,
    0x00, 0x00, 0x00, 0x00, 0x3C, 0x7E, 0xFF, 0xFF, 0x00, 0x10, 0x2C, 0x3A,
    0x5C, 0x34, 0x04, 0x00, 0x66, 0xFF, 0xFF, 0xFF, 0x7E, 0x3C, 0x18, 0x18,
    0x18, 0x3C, 0x18, 0x42, 0xE7, 0x42, 0x18, 0x3C, 0x18, 0x18, 0x18, 0x18,
    0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0x0F, 0x0F,
    0x81, 0x42, 0x24, 0x18, 0x18, 0x24, 0x42, 0x81, 0xF0, 0xF0, 0xE0, 0xC0,
    0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01,
    0xC0, 0xE0, 0xF0, 0xF0, 0xF0, 0xF0, 0xE0, 0xC0, 0x00, 0x00, 0x00, 0xFF,
    0xFF, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xF8, 0xF8, 0x18, 0x18, 0x18,
    0x00, 0x00, 0x00, 0x1F, 0x1F, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xF8,
    0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F,
    0xF0, 0xF0, 0xF0, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x00,
    0x00, 0x0F, 0x0F, 0x0F, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x0F, 0x0F, 0x0F,
    0x00, 0x00, 0x00, 0xF0, 0xF0, 0x0F, 0x0F, 0x0F, 0xF0, 0xF0, 0xF0, 0xF0,
    0xF0, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0xF0, 0xF0, 0x0F, 0x0F, 0x0F,
    0xFF, 0xFF, 0xFF, 0xF0, 0xF0, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x0F,
    0x0F, 0x0F, 0x0F, 0x0F, 0xF0, 0xF0, 0xF0, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
    0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0xFF, 0xFF, 0xFF, 0x0F,
    0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x0F, 0x0F, 0x0F,
    0xF0, 0xF0, 0xF0, 0xFF, 0xFF, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0xFF,
    0xFF, 0x0F, 0x0F, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x0F, 0x0F,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xF0, 0xF0, 0xF0, 0x00,
    0x00, 0xFF, 0xFF, 0xFF, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xF0,
    0xF0, 0xFF, 0xFF, 0xFF, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xFF, 0xFF, 0xFF,
    0x0F, 0x0F, 0x0F, 0xF0, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0,
    0xF0, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0xFF, 0xFF, 0xFF,
    0xF0, 0xF0, 0xF0, 0x0F, 0x0F, 0xFF, 0xFF, 0xFF, 0x0F, 0x0F, 0x0F, 0x0F,
    0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x0F, 0xFF, 0xFF, 0xFF,
    0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xF0, 0xF0, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x0F, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF

#END

// colours array - RGB 565 conversion of RGB 332 format. Can be replaced with 256 shades of custom colour pallete
var colours[] := [0x0000, 0x000a, 0x0015, 0x001f, 0x0120, 0x012a, 0x0135, 0x013f,
                  0x0240, 0x024a, 0x0255, 0x025f, 0x0360, 0x036a, 0x0375, 0x037f,
                  0x0480, 0x048a, 0x0495, 0x049f, 0x05a0, 0x05aa, 0x05b5, 0x05bf,
                  0x06c0, 0x06ca, 0x06d5, 0x06df, 0x07e0, 0x07ea, 0x07f5, 0x07ff,
                  0x2000, 0x200a, 0x2015, 0x201f, 0x2120, 0x212a, 0x2135, 0x213f,
                  0x2240, 0x224a, 0x2255, 0x225f, 0x2360, 0x236a, 0x2375, 0x237f,
                  0x2480, 0x248a, 0x2495, 0x249f, 0x25a0, 0x25aa, 0x25b5, 0x25bf,
                  0x26c0, 0x26ca, 0x26d5, 0x26df, 0x27e0, 0x27ea, 0x27f5, 0x27ff,
                  0x4800, 0x480a, 0x4815, 0x481f, 0x4920, 0x492a, 0x4935, 0x493f,
                  0x4a40, 0x4a4a, 0x4a55, 0x4a5f, 0x4b60, 0x4b6a, 0x4b75, 0x4b7f,
                  0x4c80, 0x4c8a, 0x4c95, 0x4c9f, 0x4da0, 0x4daa, 0x4db5, 0x4dbf,
                  0x4ec0, 0x4eca, 0x4ed5, 0x4edf, 0x4fe0, 0x4fea, 0x4ff5, 0x4fff,
                  0x6800, 0x680a, 0x6815, 0x681f, 0x6920, 0x692a, 0x6935, 0x693f,
                  0x6a40, 0x6a4a, 0x6a55, 0x6a5f, 0x6b60, 0x6b6a, 0x6b75, 0x6b7f,
                  0x6c80, 0x6c8a, 0x6c95, 0x6c9f, 0x6da0, 0x6daa, 0x6db5, 0x6dbf,
                  0x6ec0, 0x6eca, 0x6ed5, 0x6edf, 0x6fe0, 0x6fea, 0x6ff5, 0x6fff,
                  0x9000, 0x900a, 0x9015, 0x901f, 0x9120, 0x912a, 0x9135, 0x913f,
                  0x9240, 0x924a, 0x9255, 0x925f, 0x9360, 0x936a, 0x9375, 0x937f,
                  0x9480, 0x948a, 0x9495, 0x949f, 0x95a0, 0x95aa, 0x95b5, 0x95bf,
                  0x96c0, 0x96ca, 0x96d5, 0x96df, 0x97e0, 0x97ea, 0x97f5, 0x97ff,
                  0xb000, 0xb00a, 0xb015, 0xb01f, 0xb120, 0xb12a, 0xb135, 0xb13f,
                  0xb240, 0xb24a, 0xb255, 0xb25f, 0xb360, 0xb36a, 0xb375, 0xb37f,
                  0xb480, 0xb48a, 0xb495, 0xb49f, 0xb5a0, 0xb5aa, 0xb5b5, 0xb5bf,
                  0xb6c0, 0xb6ca, 0xb6d5, 0xb6df, 0xb7e0, 0xb7ea, 0xb7f5, 0xb7ff,
                  0xd800, 0xd80a, 0xd815, 0xd81f, 0xd920, 0xd92a, 0xd935, 0xd93f,
                  0xda40, 0xda4a, 0xda55, 0xda5f, 0xdb60, 0xdb6a, 0xdb75, 0xdb7f,
                  0xdc80, 0xdc8a, 0xdc95, 0xdc9f, 0xdda0, 0xddaa, 0xddb5, 0xddbf,
                  0xdec0, 0xdeca, 0xded5, 0xdedf, 0xdfe0, 0xdfea, 0xdff5, 0xdfff,
                  0xf800, 0xf80a, 0xf815, 0xf81f, 0xf920, 0xf92a, 0xf935, 0xf93f,
                  0xfa40, 0xfa4a, 0xfa55, 0xfa5f, 0xfb60, 0xfb6a, 0xfb75, 0xfb7f,
                  0xfc80, 0xfc8a, 0xfc95, 0xfc9f, 0xfda0, 0xfdaa, 0xfdb5, 0xfdbf,
                  0xfec0, 0xfeca, 0xfed5, 0xfedf, 0xffe0, 0xffea, 0xfff5, 0xffff];


var bcol, lastbcol;
var RXbuff[4000];
var textColour := WHITE;
var bufful;
var data1;
var data2;
var x1;
var y1;
var textChar;
var cellColour;
var posleft := 32; // Left position of Serial image window
var postop := 28;  // Top  position of Serial image window
var buttonPressed := -1;
var t;
var i;

func main()
//  var hstrings ; // Handle to access uSD strings, uncomment if required
//  var hFontx ;   // Handle to access uSD fonts, uncomment if required and change n to font number
//  Uncomment the following if uSD images, fonts or strings used.

    // for Fat File System
    putstr("Mounting...\n");
    if (!(file_Mount()))
        while(!(file_Mount()))
            putstr("Drive not mounted...");
            pause(200);
            gfx_Cls();
            pause(200);
        wend
    endif
    // for (GCI) Flash File System
//    media_InitFlash(FLASH_ADDR_DEF_COMMAND) ;                          // use media_Init if PmmC < v20 and flash <= 16MB
//    gfx_TransparentColour(0x0020);    // uncomment if transparency required, please understand why and when you need to use this
//    gfx_Transparency(ON);             // uncomment if transparency required, as generally there is a performance hit when using it

    // for Fat File System
//  hFontn := file_LoadImageControl("RUTRON~1.dan", "RUTRON~1.gcn", 1); // Open handle to access uSD fonts, uncomment if required and change n to font number dropping a and c if > 9
//  hstrings := file_Open("RUTRON~1.txf", 'r') ; // Open handle to access uSD strings, uncomment if required
 //   hndl := file_LoadImageControl("RUTRON~1.dat", "RUTRON~1.gci", 1);
    // for (GCI) Flash File System
//    hndl := file_LoadImageControl(0, 0, 3); // fonts, strings and WAV files are all entries in here.


    gfx_Set(SCREEN_MODE,LANDSCAPE) ;
    gfx_Cls();
    touch_Set(TOUCH_ENABLE);
    txt_FontID(Aquarius8);
    txt_FGcolour(textColour);

    com_SetBaud(COM0, 3); // set baud rate to special 1093750
    com_Init(RXbuff, 8000, 0);


    repeat

      if(com_Count() > 3) // if the serial buffer contains 4 or more bytes, process bytes
      // ***** buffer check routine. Will send a 0xff if the buffer is nearly full for the host to pause sending. A 0xFE is sent if buffer falls a little
      if(com_Count() > 7500 && (!(bufful)))
        bufful := 1;
        sendBuffData();
      endif
      if(com_Count() <= 7500 && (bufful))
        bufful := 0;
        sendBuffData();
      endif
      // ***** end of buffer check routine
      // process 4 bytes of serial data
      data1 := serin();
      data2 := serin();
      y1 := (data2 << 3) + postop;
      x1 := posleft + (data1 << 3);
      textChar := serin();
      cellColour := serin();
      if(data1 > 249)
        if(data1 == 250) // change text colour 250 command
          textColour := data2 + (textChar << 8);
          txt_FGcolour(textColour);
        endif
        if(data1 == 251) // change Serial image left start position
          posleft := data2 + (textChar << 8);
        endif
        if(data1 == 252) // change Serial image top start position
          postop := data2 + (textChar << 8);
        endif
      else
        if(textChar == 32) // if no text simpy draw a fast rectangle else draw a character
          gfx_RectangleFilled(x1, y1, x1 + 7, y1 + 7, colours[cellColour]);
        else
          txt_BGcolour(colours[cellColour]);
          gfx_MoveTo(x1, y1);
          putch(textChar);
        endif

      endif

    endif

  forever

endfunc

func sendBuffData()
  serout(254+bufful);
endfunc

func sendPressedData(var pressed)
  serout(pressed + 1);
  buttonPressed := pressed;
endfunc

